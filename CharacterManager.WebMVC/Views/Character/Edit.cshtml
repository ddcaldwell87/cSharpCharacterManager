@model CharacterManager.Models.CharacterModels.CharacterEdit

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>CharacterEdit</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.CharacterId, htmlAttributes: new { @class = "control-label col-md-2", @style = "display: none;" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CharacterId, new { htmlAttributes = new { @class = "form-control", @id = "disabledInput", @style = "display: none;" } })
            @Html.ValidationMessageFor(model => model.CharacterId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CharacterName, "Name*", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CharacterName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CharacterName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CharacterRace, "Race*", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.CharacterRace, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CharacterRace, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CharacterGender, "Gender*", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.CharacterGender, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CharacterGender, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CharacterClass, "Class*", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.CharacterClass, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CharacterClass, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Alignment, "Alignment*", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(x => x.Alignment, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Alignment, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.HitPoints, "Hit Points*", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.HitPoints, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HitPoints, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PersonalityTraits, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PersonalityTraits, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PersonalityTraits, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Ideals, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Ideals, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Ideals, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Bonds, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Bonds, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Bonds, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Flaws, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Flaws, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Flaws, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
